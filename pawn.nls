to pawn-mark-valid-move-spots
  if moved? and heading = 0
  [pieces-mark-direction pieces-same-direction pieces-up-direction 1 pieces-never-mark-obstacles]
  if moved? and heading = 180
  [pieces-mark-direction pieces-same-direction pieces-down-direction 1 pieces-never-mark-obstacles]
  
  if not moved? and heading = 0
  [pieces-mark-direction pieces-same-direction pieces-up-direction 2 pieces-never-mark-obstacles]
  if not moved? and heading = 180
  [pieces-mark-direction pieces-same-direction pieces-down-direction 2 pieces-never-mark-obstacles]
  
  pawn-mark-valid-capture-spots false
  pieces-ensure-moves-will-not-danger-king
end

to pawn-mark-valid-capture-spots [always-mark?]
  let direction ((heading / -90) + 1)
  let my-color  color
  ask (patch-set (patch-at -1 direction) (patch-at 1 direction))
  [
    if any? turtles-here with [color != my-color] or always-mark?
    [set marked? true]
  ]
  ask (patch-set (patch-left-and-ahead 90 1) (patch-right-and-ahead 90 1))
  [
    ask pawns-here with [can-be-enpassanted?]
    [
      ask (patch-set (patch-ahead -1)) with [not any? turtles-here]
      [set marked? true]
    ]
  ]
end

to pawn-assess-can-be-enpassanted
  if not moved?
  [
    if heading = 0 and ycor = 3
    [set can-be-enpassanted? true]
    if heading = 180 and ycor = 4
    [set can-be-enpassanted? true]
  ]
end

to pawn-assess-capture-by-enpassant
  let pawns-behind-me (pawns-on patch-ahead -1)
  if any? pawns-behind-me with [can-be-enpassanted? and color != [color] of myself]
  [
    ask pawns-behind-me
    [
      set game-last-move-was-capture? true
      die
    ]
  ]
  ask other pawns
  [set can-be-enpassanted? false]
end

to pawn-reset-can-be-enpassanted
  ask pawns
  [set can-be-enpassanted? false]
end

to-report pawn-can-be-promoted? [pawn-piece]
  let can-be-promoted? false
  ask pawn-piece
  [set can-be-promoted? (breed = pawns and (ycor = 0 or ycor = 7))]
  report can-be-promoted?
end