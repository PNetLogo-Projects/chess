breed [pawns pawn]
breed [rooks rook]
breed [knights knight]
breed [bishops bishop]
breed [queens queen]
breed [kings king]

pawns-own [can-be-enpassanted?]

to pieces-initialize-constants
  set pieces-left-direction -1
  set pieces-right-direction 1
  set pieces-down-direction -1
  set pieces-up-direction 1
  set pieces-same-direction 0
end

to render-pieces
  render-pieces-of-type pawns [0 1 2 3 4 5 6 7] [1 6]
  foreach (list (list rooks   [0 7] [0 7])
                (list knights [1 6] [0 7])
                (list bishops [2 5] [0 7])
                (list queens  [3] [0 7])
                (list kings   [4] [0 7]))
  [piece-data -> (render-pieces-of-type (item 0 piece-data) (item 1 piece-data) (item 2 piece-data))]
  ask turtles with [member? breed (list pawns rooks knights bishops queens kings)]
  [
    ifelse ycor < 4
    [set heading 0]
    [set heading 180]
  ]
end

to render-pieces-of-type [piece-type piece-xcors piece-ycors]
  ask patches with [member? pxcor piece-xcors and member? pycor piece-ycors]
  [
    sprout 1
    [
      set breed piece-type
      ifelse ycor < 2
      [set color white]
      [set color black]
      set shape (word piece-type)
      set moved? false
      
      if breed = pawns
      [set can-be-enpassanted? false]
    ]
  ]
end

to pieces-mark-valid-moves
  reset-marks
  if breed = pawns
  [
    pawn-mark-valid-move-spots
    pawn-mark-valid-capture-spots false
  ]
  if breed = rooks
  [rook-mark-valid-move-spots]
  if breed = knights
  [knight-mark-valid-move-spots]
  if breed = bishops
  [bishop-mark-valid-move-spots]
  if breed = queens
  [queen-mark-valid-move-spots]
  if breed = kings
  [king-mark-valid-move-spots]
end

to pieces-mark-valid-captures
end

to pieces-assess-if-move-was-special
  if breed = pawns
  [
    pawn-assess-can-be-enpassanted
    pawn-assess-capture-by-enpassant
  ]
end

to pieces-mark-horizontal
  pieces-mark-direction pieces-left-direction pieces-same-direction 7
  pieces-mark-direction pieces-right-direction pieces-same-direction 7
end

to pieces-mark-vertical
  pieces-mark-direction pieces-same-direction pieces-up-direction 7
  pieces-mark-direction pieces-same-direction pieces-down-direction 7
end

to pieces-mark-major-diagonal
  pieces-mark-direction pieces-left-direction pieces-down-direction 7
  pieces-mark-direction pieces-right-direction pieces-up-direction 7
end

to pieces-mark-minor-diagonal
  pieces-mark-direction pieces-left-direction pieces-up-direction 7
  pieces-mark-direction pieces-right-direction pieces-down-direction 7
end

to pieces-mark-direction [initial-xoffset initial-yoffset piece-range]
  let blocked? false
  let xoffset initial-xoffset
  let yoffset initial-yoffset
  while [not blocked? and piece-range > 0 and (pieces-still-within-bounds? (xcor + xoffset) (ycor + yoffset))]
  [
    let turtles-at-offset (turtles-at xoffset yoffset)
    if not any? turtles-at-offset or any? turtles-at-offset with [color != [color] of myself]
    [
      ask patch-at xoffset yoffset
      [set marked? true]
    ]
    if any? turtles-at-offset
    [set blocked? true]
    
    set xoffset (xoffset + initial-xoffset)
    set yoffset (yoffset + initial-yoffset)
    set piece-range (piece-range - 1)
  ]
end

to-report pieces-still-within-bounds? [new-xcor new-ycor]
  report new-xcor >= 0 and new-xcor <= 7 and new-ycor >= 0 and new-ycor <= 7
end