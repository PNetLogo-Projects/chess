breed [pawns pawn]
breed [rooks rook]
breed [knights knight]
breed [bishops bishop]
breed [queens queen]
breed [kings king]

pawns-own [can-be-enpassanted?]
kings-own [can-castle?]

to pieces-initialize-constants
  set pieces-left-direction -1
  set pieces-right-direction 1
  set pieces-down-direction -1
  set pieces-up-direction 1
  set pieces-same-direction 0
  
  set pieces-always-mark-obstacles 0
  set pieces-mark-opposing-obstacles 1
  set pieces-never-mark-obstacles 2
  set pieces-max-search-depth 7
end

to render-pieces
  render-pieces-of-type pawns [0 1 2 3 4 5 6 7] [1 6]
  foreach (list (list rooks   [0 7] [0 7])
                (list knights [1 6] [0 7])
                (list bishops [2 5] [0 7])
                (list queens  [3] [0 7])
                (list kings   [4] [0 7]))
  [piece-data -> (render-pieces-of-type (item 0 piece-data) (item 1 piece-data) (item 2 piece-data))]
  ask turtles with [member? breed (list pawns rooks knights bishops queens kings)]
  [
    ifelse ycor < 4
    [set heading 0]
    [set heading 180]
  ]
end

to render-pieces-of-type [piece-type piece-xcors piece-ycors]
  ask patches with [member? pxcor piece-xcors and member? pycor piece-ycors]
  [
    sprout 1
    [
      set breed piece-type
      ifelse ycor < 2
      [set color white]
      [set color black]
      set shape (word piece-type)
      set moved? false
      
      if breed = pawns
      [set can-be-enpassanted? false]
    ]
  ]
end

to-report pieces-valid-piece?
  report member? breed (list pawns rooks knights bishops queens kings) and pieces-still-within-bounds? xcor ycor
end

to-report pieces-enemies
  report turtles with [color != [color] of myself and pieces-valid-piece?]
end

to-report pieces-allies
  report turtles with [color = [color] of myself and pieces-valid-piece?]
end

to-report pieces
  report turtles with [pieces-valid-piece?]
end

to pieces-mark-valid-moves
  if breed = pawns
  [
    pawn-mark-valid-move-spots
    pawn-mark-valid-capture-spots false
  ]
  if breed = rooks
  [rook-mark-valid-move-spots]
  if breed = knights
  [knight-mark-valid-move-spots]
  if breed = bishops
  [bishop-mark-valid-move-spots]
  if breed = queens
  [queen-mark-valid-move-spots]
  if breed = kings
  [king-mark-valid-move-spots]
end

to pieces-mark-valid-captures [always-mark?]
  if breed = pawns
  [pawn-mark-valid-capture-spots always-mark?]
  if breed = rooks
  [rook-mark-valid-capture-spots always-mark?]
  if breed = knights
  [knight-mark-valid-capture-spots always-mark?]
  if breed = bishops
  [bishop-mark-valid-capture-spots always-mark?]
  if breed = queens
  [queen-mark-valid-capture-spots always-mark?]
  if breed = kings
  [king-mark-valid-capture-spots always-mark?]
end

to pieces-ensure-moves-will-not-danger-king
  no-display
  let original-xcor xcor
  let original-ycor ycor
  let move-candidates (sort patches with [marked?])
  let actual-move-candidates []
  foreach move-candidates
  [
    candidate ->
    
    setxy [pxcor] of candidate [pycor] of candidate
    let other-turtles other turtles-here
    if any? other-turtles
    [
      ask other-turtles
      [setxy -1 0]
    ]
    reset-marks
    ask pieces-enemies
    [pieces-mark-valid-captures true]
    if not king-is-in-danger?
    [set actual-move-candidates (lput candidate actual-move-candidates)]
    ask other-turtles
    [setxy [xcor] of myself [ycor] of myself]
  ]
  reset-marks
  setxy original-xcor original-ycor
  ask patch-set actual-move-candidates
  [set marked? true]
  display
end

to pieces-assess-if-move-was-special
  if breed = pawns
  [
    pawn-assess-can-be-enpassanted
    pawn-assess-capture-by-enpassant
  ]
  if breed = kings
  [king-assess-is-attempt-to-castle]
end

to pieces-mark-horizontal [search-depth mark-obstacles]
  pieces-mark-direction pieces-left-direction pieces-same-direction search-depth mark-obstacles
  pieces-mark-direction pieces-right-direction pieces-same-direction search-depth mark-obstacles
end

to pieces-mark-vertical [search-depth mark-obstacles]
  pieces-mark-direction pieces-same-direction pieces-up-direction search-depth mark-obstacles
  pieces-mark-direction pieces-same-direction pieces-down-direction search-depth mark-obstacles
end

to pieces-mark-major-diagonal [search-depth mark-obstacles]
  pieces-mark-direction pieces-left-direction pieces-down-direction search-depth mark-obstacles
  pieces-mark-direction pieces-right-direction pieces-up-direction search-depth mark-obstacles
end

to pieces-mark-minor-diagonal [search-depth mark-obstacles]
  pieces-mark-direction pieces-left-direction pieces-up-direction search-depth mark-obstacles
  pieces-mark-direction pieces-right-direction pieces-down-direction search-depth mark-obstacles
end

to pieces-mark-direction [initial-xoffset initial-yoffset piece-range mark-obstacles]
  let blocked? false
  let xoffset initial-xoffset
  let yoffset initial-yoffset
  while [not blocked? and piece-range > 0 and (pieces-still-within-bounds? (xcor + xoffset) (ycor + yoffset))]
  [
    let turtles-at-offset (turtles-at xoffset yoffset)
    if (mark-obstacles = pieces-always-mark-obstacles) or not any? turtles-at-offset or (
      (mark-obstacles = pieces-mark-opposing-obstacles) and any? turtles-at-offset with [color != [color] of myself])
    [
      ask patch-at xoffset yoffset
      [set marked? true]
    ]
    if any? turtles-at-offset
    [set blocked? true]
    
    set xoffset (xoffset + initial-xoffset)
    set yoffset (yoffset + initial-yoffset)
    set piece-range (piece-range - 1)
  ]
end

to-report pieces-still-within-bounds? [new-xcor new-ycor]
  report new-xcor >= 0 and new-xcor <= 7 and new-ycor >= 0 and new-ycor <= 7
end