__includes [
  "game/menus/exit-screen.nls"
  "game/menus/game-over-screen.nls"
  "game/menus/splash-screen.nls"
  "game/menus/settings-screen.nls"
  
  "game/menus/pawn-promotion-screen.nls"
  
  "game/load-game.nls"
  "game/save-game.nls"
]

to game-initialize-constants
  set game-white-turn white
  set game-black-turn black
  set game-white-color white
  set game-black-color black
end

to game-initialize-globals
  set game-turn game-white-turn
  set game-turn-color game-white-color
  set game-selected-piece nobody
  set game-last-moved-piece nobody
  set game-last-move-was-capture? false
  set game-fifty-moves-rule-counter 0
  set game-move-history []
  set game-undo-turtles nobody
  set game-clock-times []
  set game-clock-turtles (list nobody nobody)
end

to new-game
  setup-game
  main-loop
end

to setup-game
  ca
  reset-ticks
  initialize-constants
  initialize-globals
  
  render-board
  render-pieces
  draw-exit-button
  sync-screen
end

to main-loop
  let game-over false
  let mouse-up? (not mouse-down?)
  set game-clock-times (list
    (item settings-game-clock-time-index settings-game-clock-times)
    (item settings-game-clock-time-index settings-game-clock-times))

  reset-timer
  while [not game-over]
  [
    if not mouse-down?
    [set mouse-up? true]
    if mouse-inside? and mouse-down? and mouse-up? and mouse-xcor >= 0 and mouse-xcor <= 7
    [
      set mouse-up? false
      handle-user-input
    ]
    draw-undo
    handle-undo
    update-game-clock
    assess-if-user-wants-to-exit
  ]
end

to handle-user-input
  let mouse-x round mouse-xcor
  let mouse-y round mouse-ycor
  let patch-at-mouse-coordinates (one-of board-patches with [pxcor = mouse-x and pycor = mouse-y])
  let turtles-at-mouse-coordinates (
    pieces with [xcor = [pxcor] of patch-at-mouse-coordinates and ycor = [pycor] of patch-at-mouse-coordinates])
  
  if any? turtles-at-mouse-coordinates with [color = game-turn-color]
  [
    if game-last-moved-piece != nobody
    [
      ask game-last-moved-piece
      [set pcolor orig-color]
    ]
    sync-screen
    reset-marks
    set game-selected-piece one-of turtles-at-mouse-coordinates
    ask game-selected-piece
    [pieces-mark-valid-moves]
    highlight-marked
  ]
  if game-selected-piece != nobody and (within-board-bounds? mouse-x mouse-y)
  [
    update-game-move-history
    set game-last-move-was-capture? false
    if [marked?] of patch-at-mouse-coordinates
    [
      ask game-selected-piece
      [
        setxy mouse-x mouse-y
        tpieces-assess-if-move-was-special
        set moved? true
        ask other turtles-here
        [
          set game-last-move-was-capture? true
          die
        ]
        set game-last-moved-piece self
        set pcolor blue
      ]
      sync-screen
      set game-selected-piece nobody
      advance-fifty-moves-rule-counter
      reset-marks
      pieces-assess-if-move-was-special 
      next-turn
      switch-view
      if game-over-by-checkmate?
      [
        ifelse game-turn = game-white-turn
        [show-game-over-by-checkmate-screen "Black"]
        [show-game-over-by-checkmate-screen "White"]
      ]
      if game-over-by-stalemate?
      [show-game-over-by-stalemate-screen]
      if game-draw-by-threefold-repetition?
      [show-draw-offer-screen "threefold repetition"]
      if game-draw-by-fifty-moves-rule?
      [show-draw-offer-screen "fifty moves rule"]
    ]
  ]
end

to update-game-move-history
  set game-move-history (lput (save-game-to-fen-notation) game-move-history)
end

to draw-game-clock
  let index-list [0 1]
  let title-list ["White's Turn" "Black's Turn"]
  let y-coordinate-list [1 5]
  
  foreach index-list
  [
    index ->
    
    let title (item index title-list)
    let y-coordinate (item index y-coordinate-list)
    if (item index game-clock-turtles) = nobody
    [
      aligned-render-string title (list 11.5 (y-coordinate + 1)) text-center-align 1 black
      let initial-time (item index game-clock-times)
      let rendered-turtles (temp-aligned-render-string initial-time (list 11.5 y-coordinate) text-center-align 1 black)
      set game-clock-turtles (replace-item index game-clock-turtles rendered-turtles)
    ]
    ask (item index game-clock-turtles)
    [die]
    let new-time (item index game-clock-times)
    let rendered-turtles (temp-aligned-render-string new-time (list 11.5 y-coordinate) text-center-align 1 black)
    set game-clock-turtles (replace-item index game-clock-turtles rendered-turtles)
  ]
end

to update-game-clock
  if settings-play-by-time?
  [
    draw-game-clock
    let elapsed-time (simplify-seconds (floor timer))
    
    if (total-seconds elapsed-time) != 0
    [
      ifelse game-turn = game-white-turn
      [
        let new-time (subtract-time-string "%M:%S" (item 0 game-clock-times) (strftime "%M:%S" elapsed-time))
        set game-clock-times (replace-item 0 game-clock-times new-time)
        draw-game-clock
      ]
      [
        let new-time (subtract-time-string "%M:%S" (item 1 game-clock-times) (strftime "%M:%S" elapsed-time))
        set game-clock-times (replace-item 1 game-clock-times new-time)
        draw-game-clock
      ]
      reset-timer
    ]
    sync-screen
  ]
end

to highlight-marked
  if settings-highlight-valid-move?
  [
    ask board-patches with [marked?]
    [set pcolor yellow]
    sync-screen
  ]
end

to switch-view
  if settings-switch-view?
  [
    flip-board
    flip-pieces
    sync-screen
  ]
end

to draw-undo
  ifelse settings-allow-undo? and (length game-move-history) > 0
  [
    if game-undo-turtles = nobody
    [set game-undo-turtles (temp-aligned-render-string "Undo" [-3 2] text-center-align 1 black)]
  ]
  [
    if game-undo-turtles != nobody
    [
      ask game-undo-turtles
      [die]
    ]
    set game-undo-turtles nobody
  ]
  sync-screen
end

to handle-undo
  if game-undo-turtles != nobody
  [
    ask game-undo-turtles
    [
      ifelse game-hovering-over-undo?
      [set color white]
      [set color black]
    ]
  ]
  if mouse-down? and game-hovering-over-undo?
  [
    undo
    while [mouse-down?]
    []
  ]
end

to undo
  if length game-move-history > 0
  [
    let last-move (last game-move-history)
    set game-move-history (but-last game-move-history)
    load-game-from-fen-notation (last-move)
  ]
end

to-report game-over-by-checkmate?
  if not king-is-in-danger?
  [report false]
  reset-marks
  let possible-checkmate? true
  let checkmate? true
  ask kings with [color = game-turn-color]
  [
    ask pieces-allies
    [
      if possible-checkmate?
      [
        pieces-mark-valid-moves
        if any? board-patches with [marked?]
        [
          set possible-checkmate? false
          set checkmate? false
        ]
      ]
    ]
  ]
  reset-marks
  report checkmate?
end

to-report game-over-by-stalemate?
  if king-is-in-danger?
  [report false]
  reset-marks
  let possible-stalemate? true
  let stalemate? true
  ask kings with [color = game-turn-color]
  [
    ask pieces-allies
    [
      if possible-stalemate?
      [
        pieces-mark-valid-moves
        if any? board-patches with [marked?]
        [
          set possible-stalemate? false
          set stalemate? false
        ]
      ]
    ]
  ]
  reset-marks
  report stalemate?
end

to-report game-draw-by-fifty-moves-rule?
  report game-fifty-moves-rule-counter >= 50
end

to-report game-draw-by-threefold-repetition?
  let current-move-fen-notation save-game-to-fen-notation
  let current-position (item 0 current-move-fen-notation)
  let current-turn (item 3 current-move-fen-notation)
  let castling-rights (item 4 current-move-fen-notation)
  let enpassant-rights (item 5 current-move-fen-notation)
  
  let repetition 0
  foreach game-move-history
  [
    move ->
    
    if (current-position = (item 0 move) and current-turn = (item 3 move) and castling-rights = (item 4 move) and
      enpassant-rights = (item 5 move))
    [set repetition (repetition + 1)]
  ]
  
  report repetition >= 3
end

to advance-fifty-moves-rule-counter
  ifelse [breed] of game-last-moved-piece != pawns and not game-last-move-was-capture?
  [set game-fifty-moves-rule-counter (game-fifty-moves-rule-counter + 1)]
  [set game-fifty-moves-rule-counter 0]
end

to next-turn
  ifelse game-turn = game-white-turn
  [
    set game-turn game-black-turn
    set game-turn-color game-black-color
    reset-timer
  ]
  [
    set game-turn game-white-turn
    set game-turn-color game-white-color
    reset-timer
  ]
end

to-report game-hovering-over-undo?
  if game-undo-turtles = nobody
  [report false]
  let undo-min-x min [xcor] of game-undo-turtles
  let undo-max-x max [xcor] of game-undo-turtles
  let undo-y one-of [ycor] of game-undo-turtles
  report (mouse-xcor >= undo-min-x and mouse-xcor <= undo-max-x
    and mouse-ycor >= undo-y - .5 and mouse-ycor <= undo-y + .5)
end