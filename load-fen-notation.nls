to load-game-from-fen-notation [fen-notation]
  ask pieces
  [die]
  
  load-board-from-fen-notation fen-notation
  load-moved-attributes-from-fen-notation fen-notation
  load-game-turn-from-fen-notation fen-notation
  load-enpassant-pawns-from-fen-notation fen-notation
  load-fifty-moves-rule-counter-from-fen-notation fen-notation
end

to load-board-from-fen-notation [fen-notation]
  let empty-spaces 0
  let board (item 0 fen-notation)
  let end-pos (position "|" board)
  foreach sort patches with [pxcor >= 0 and pxcor <= 7 and pycor >= 0 and pycor <= 7]
  [
    board-square ->
    
    ifelse empty-spaces = 0
    [
      let next-bit (substring board 0 end-pos)
      carefully 
      [set empty-spaces ((read-from-string next-bit) - 1)]
      [pieces-spawn-piece-from-notation-at-square next-bit board-square]
      set board (substring board (end-pos + 1) (length board))
      set end-pos (position "|" board)
    ]
    [set empty-spaces (empty-spaces - 1)]
  ]
end

to load-moved-attributes-from-fen-notation [fen-notation]
  let moved-attributes (item 1 fen-notation)
  let empty-spaces 0
  let end-pos (position "|" moved-attributes)
  foreach sort patches with [pxcor >= 0 and pxcor <= 7 and pycor >= 0 and pycor <= 7]
  [
    board-square ->
    
    ifelse empty-spaces = 0
    [
      let next-bit (substring moved-attributes 0 end-pos)
      carefully
      [set empty-spaces ((read-from-string next-bit) - 1)]
      [
        ask pieces with [xcor = [pxcor] of board-square and ycor = [pycor] of board-square]
        [set moved? true]
      ]
      set moved-attributes (substring moved-attributes (end-pos + 1) (length moved-attributes))
      set end-pos (position "|" moved-attributes)
    ]
    [set empty-spaces (empty-spaces - 1)]
  ]
end

to load-game-turn-from-fen-notation [fen-notation]
  let game-turn-notation (item 2 fen-notation)
  ifelse game-turn-notation = "w"
  [
    set game-turn game-white-turn
    set game-turn-color game-black-color
  ]
  [
    set game-turn game-black-turn
    set game-turn-color game-black-color
  ]
end

to load-enpassant-pawns-from-fen-notation [fen-notation]
  let enpassant-pawn-xy-coordinates (item 4 fen-notation)
  if length enpassant-pawn-xy-coordinates > 0
  [
    ask pawns with [xcor = (item 0 enpassant-pawn-xy-coordinates) and ycor = (item 1 enpassant-pawn-xy-coordinates)]
    [set can-be-enpassanted? true]
  ]
end

to load-fifty-moves-rule-counter-from-fen-notation [fen-notation]
  set game-fifty-moves-rule-counter (item 5 fen-notation)
end