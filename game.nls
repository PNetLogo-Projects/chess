to game-initialize-constants
  set game-white-turn white
  set game-black-turn black
  set game-white-color white
  set game-black-color black
end

to game-initialize-globals
  set game-turn game-white-turn
  set game-turn game-white-color
  set game-selected-piece nobody
  set game-last-moved-piece nobody
  set game-last-move-was-capture? false
  set game-fifty-moves-rule-counter 0
end

to main-loop
  let game-over false
  let mouse-up? (not mouse-down?)

  while [not game-over]
  [
    if not mouse-down?
    [set mouse-up? true]
    if mouse-inside? and mouse-down? and mouse-up? and mouse-xcor >= 0 and mouse-xcor <= 7
    [
      set mouse-up? false
      handle-user-input
    ]
  ]
end

to handle-user-input
  let mouse-x round mouse-xcor
  let mouse-y round mouse-ycor
  let patches-at-mouse-coordinates (patches with [pxcor = mouse-x and pycor = mouse-y])
  
  ask patches-at-mouse-coordinates
  [
    ifelse any? turtles-here with [color = game-turn-color]
    [
      set game-selected-piece one-of turtles-here
      ask game-selected-piece
      [pieces-mark-valid-moves]
    ]
    [
      set game-last-move-was-capture? false
      if marked?
      [
        ask game-selected-piece
        [
          setxy mouse-x mouse-y
          pieces-assess-if-move-was-special
          set moved? true
          ask other turtles-here
          [
            set game-last-move-was-capture? true
            die
          ]
          set game-last-moved-piece self
        ]
        set game-selected-piece nobody
        advance-fifty-moves-rule-counter
        reset-marks
        next-turn
      ]
    ]
  ]
end

to-report game-over-by-checkmate?
  reset-marks
  ask kings with [color = game-turn-color]
  [
    ask pieces-allies
    [pieces-mark-valid-moves]
  ]
  report not any? patches with [marked?]
end

to-report game-draw-by-fifty-moves-rule?
  report game-fifty-moves-rule-counter >= 50
end

to advance-fifty-moves-rule-counter
  ifelse [breed] of game-last-moved-piece != pawns and not game-last-move-was-capture?
  [set game-fifty-moves-rule-counter (game-fifty-moves-rule-counter + 1)]
  [set game-fifty-moves-rule-counter 0]
end

to next-turn
  ifelse game-turn = game-white-turn
  [
    set game-turn game-black-turn
    set game-turn-color game-black-color
  ]
  [
    set game-turn game-white-turn
    set game-turn-color game-white-color
  ]
end